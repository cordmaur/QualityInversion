# WaterDetect configuration file
# Please note that All section and values are required. 
# There are no default values hard coded!

[General]
# sets the reference band for resolution and projections
reference_band = Red

# specifies the maximum percentage of invalid pixels in the image area
maximum_invalid = 0.8

# indicate if it is necessary to create a composite output of the area (True/False)
create_composite = True

# indicate if it should create the PDF reports
pdf_reports = True

# use texture information (stddev) to stretch the water indexes (only std1 and std2 bands)
texture_stretching = False

# *** SECTION INVERSION (L2->L3) ***
# these are the options needed for converting water pixel reflectance in water parameters
# available parameters:
# turb-dogliotti / spm-get / chl_lins / aCDOM-brezonik / 
[Inversion]
inversion = True
parameter = aCDOM-brezonik

# sets minimum and maximum value for parameter for visualization legend
# if None is provided, the scale will range from min(x) to max(x)
min_param_value = 0
max_param_value = None

# uniform distribution=True forces the parameter to be equally displaced between
# min and max, making it a uniform histogram. Should be used for visualization only.
uniform_distribution = False

# matplotlib colormap to be used
# suggestions: viridis, jet
colormap = viridis

# *** SECTION CLUSTERING ***
# these are the options needed for the DWImage clustering algorithm
[Clustering]

# Bands combinations used for the clustering algorithm. Each combination will be an Output product
clustering_bands = [['Mir2', 'mbwi', 'mndwi', 'ndwi']]
#clustering_bands = [['Mir2', 'std1', 'std2']]
#clustering_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi'], ['Mir2', 'mndwi','ndwi']]
# for otsu in any band, utilize: ['otsu', 'band']

# supported methods 'agglomerative','k-means' 
clustering_method = aglomerative

# min and max number of allowed clusters
min_clusters = 2
max_clusters = 2

# inform a threshold to clip the Mir (or any band)  band at the end of processing (None if no clipping)
clip_band = Mir2
clip_value = 0.15

# supported classifiers 'naive_bayes', 'SVM', 'MLP'
classifier = naive_bayes

# limits for the training dataset (train_size = percentage of pixels to use as training)
train_size = 0.2
min_train_size = 2000
max_train_size = 10000

# supported indexes for identifying the best number of clusters 'calinsk', 'silhouette'
score_index = calinsk

# method to detect the water cluster among the clusters
# support methods: 'maxmndwi', 'minmir', 'minerror'
detectwatercluster = maxmndwi

# *** SECTION GRAPH ***
# this section regulates the graphics parameters
[Graphs]
plot_graphs = True

#graphs_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi']]
graphs_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi'], ['mbwi','mndwi']]

# *** SECTION MASKS ***
# This section specifies the masks (cloud, shadow, etc) to be considered
# Each product (landsat, theia, etc.) has its own logic
[TheiaMasks]
CLM_all_clouds_and_shadows = yes
CLM_all_clouds = yes
CLM_clouds_blue_band = yes
CLM_clouds_multi_temporal = yes
CLM_thin_clouds = yes
CLM_cloud_shadows = yes
CLM_other_shadows = yes
CLM_high_clouds = yes

MG2_water = no
MG2_all_clouds = yes
MG2_snow = yes
MG2_cloud_shadows = yes
MG2_other_shadows = yes
MG2_terrain_mask = yes
MG2_sun_too_low = no
MG2_sun_tangent = no

[LandsatMasks]
fill = no
clear = no
water = no
cloud_shadow = no
snow = no
cloud = no
cloud_conf1 = no
cloud_conf2 = no
cirrus_conf1 = no
cirrus_conf2 = no
terrain_occlusion = no

