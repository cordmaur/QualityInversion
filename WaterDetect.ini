# WaterDetect configuration file
# Please note that All section and values are required. 
# There are no default values hard coded!

[General]
# sets the reference band for resolution and projections
reference_band = Red

# specifies the maximum percentage of invalid pixels in the image area
maximum_invalid = 0.8

# indicate if it is necessary to create a composite output of the area (True/False)
create_composite = True

# indicate if it should create the PDF reports
pdf_reports = False

# use texture information (stddev) to stretch the water indexes (only std1 and std2 bands)
texture_stretching = False

# *** SECTION EXTERNAL MASK ***
# informs if there is a mask to be used in the image's folder
# the mask name is a unique substring for the .tif file to be identified
[External_Mask]
external_mask = True
mask_name = invalid_mask
mask_valid_value = None
mask_invalid_value = 255
#mask_name = ref_mask
#mask_valid_value = None
#mask_invalid_value = 255


# *** SECTION INVERSION (L2->L3) ***
# these are the options needed for converting water pixel reflectance in water parameters
# available parameters:
# turb-dogliotti / spm-get / chl_lins / aCDOM-brezonik / chl_giteslon
[Inversion]
inversion = False
parameter = chl_giteslon

# sets minimum and maximum value for parameter for visualization legend
# if None is provided, the scale will range from min(x) to max(x)
min_param_value = 0
max_param_value = 50

# uniform distribution=True forces the parameter to be equally displaced between
# min and max, making it a uniform histogram. Should be used for visualization only.
uniform_distribution = False

# matplotlib colormap to be used
# suggestions: viridis, jet
colormap = jet

# *** SECTION CLUSTERING ***
# these are the options needed for the DWImage clustering algorithm
[Clustering]

# Bands combinations used for the clustering algorithm. Each combination will be an Output product
#clustering_bands = [['mbwi', 'Mir2']]

#clustering_bands = [['mndwi', 'mbwi']]
clustering_bands = [
		    ['PCA', 2],
		    ['PCA', 3],
		    ['PCA', 4],

;		    ['Green', 'mndwi', 'mbwi', 'Nir', 'ndwi'],
;		    ['otsu', 'mndwi'],
;		    ['otsu', 'ndwi'],
;		    ['otsu', 'mbwi'],
;		    ['otsu', 'Nir'],
;		    ['otsu', 'Mir2']]
#		    ['mndwi', 'ndwi', 'awei', 'mbwi', 'Nir', 'Mir2'],
#		    ['mndwi', 'ndwi', 'awei', 'mbwi', 'Nir'],
#		    ['mndwi', 'ndwi', 'awei', 'mbwi', 'Mir2'],
#		    ['mndwi', 'ndwi', 'awei', 'Nir', 'Mir2'],
;		    ['mndwi', 'ndwi', 'mbwi', 'Nir', 'Mir2'],
#		    ['mndwi', 'awei', 'mbwi', 'Nir', 'Mir2'],
#		    ['mndwi', 'ndwi', 'awei', 'Nir'],
;		    ['mndwi', 'ndwi', 'Nir' , 'mbwi'],
#		    ['mndwi', 'Nir' , 'awei', 'mbwi'],
#		    ['mndwi', 'ndwi', 'awei', 'Mir2'],
;		    ['mndwi', 'ndwi', 'Mir2', 'mbwi'],
#		    ['mndwi', 'Mir2', 'awei', 'mbwi'],
;		    ['mndwi', 'ndwi', 'Nir' , 'Mir2'],
;		    ['mndwi', 'Nir' , 'Mir2', 'mbwi'],
#		    ['mndwi', 'Nir' , 'awei', 'Mir2'],
#		    ['mndwi', 'ndwi', 'awei'],
;		    ['mndwi', 'ndwi', 'Mir2'],
#		    ['mndwi', 'Mir2', 'awei'],
;		    ['mndwi', 'ndwi', 'Nir' ],
#;		    ['mndwi', 'Nir' , 'awei'],
;		    ['mndwi', 'ndwi', 'mbwi'],
#		    ['mndwi', 'mbwi', 'awei']]
;		    ['mndwi', 'Nir' , 'Mir2'],
;		    ['mndwi', 'Nir' , 'mbwi'],
;		    ['mndwi', 'Mir2', 'mbwi'],
;		    ['mndwi', 'ndwi'],
#		    ['mndwi', 'awei'],
;		    ['mndwi', 'mbwi'],
;		    ['mndwi', 'Nir'],
;		    ['mndwi', 'Mir2'],
;		    ['ndwi', 'mbwi', 'Nir', 'Mir2'],
;		    ['ndwi', 'Nir' , 'mbwi'],
;		    ['ndwi', 'Mir2', 'mbwi'],
;		    ['ndwi', 'Nir' , 'Mir2'],
;		    ['Nir' , 'Mir2', 'mbwi'],
;		    ['ndwi', 'Mir2'],
;;		    ['ndwi', 'Nir' ],
;		    ['ndwi', 'mbwi'],
;		    ['Nir' , 'Mir2'],
;		    ['Nir' , 'mbwi'],
;		    ['Mir2', 'mbwi'],
		    ]

#clustering_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi'], ['Mir2', 'mndwi','ndwi']]
# for otsu in any band, utilize: ['otsu', 'band']

# supported methods 'agglomerative','k-means' 
clustering_method = aglomerative

# linkage for aglomarative can be 'ward', 'average', 'single', 'complete'
linkage = average

# min and max number of allowed clusters
min_clusters = 2
max_clusters = 10

# inform a threshold to clip the Mir (or any band)  band at the end of processing (None if no clipping)
clip_band = None
clip_value = None

# supported classifiers 'naive_bayes', 'SVM', 'MLP'
classifier = naive_bayes

# limits for the training dataset (train_size = percentage of pixels to use as training)
train_size = 0.2
min_train_size = 500
max_train_size = 10000

# supported indexes for identifying the best number of clusters 'calinsk', 'silhouette'
score_index = calinsk

# method to detect the water cluster among the clusters
# support methods: 'maxmndwi', 'minmir', 'minerror'
detectwatercluster = maxmndwi

# *** SECTION GRAPH ***
# this section regulates the graphics parameters
[Graphs]
plot_graphs = True

#graphs_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi']]
graphs_bands = [['Mir2', 'mndwi'], ['ndwi', 'mndwi'], ['Mir2', 'mbwi']]

# *** SECTION MASKS ***
# This section specifies the masks (cloud, shadow, etc) to be considered
# Each product (landsat, theia, etc.) has its own logic
[TheiaMasks]
CLM_all_clouds_and_shadows = no
CLM_all_clouds = no
CLM_clouds_blue_band = no
CLM_clouds_multi_temporal = no
CLM_thin_clouds = no
CLM_cloud_shadows = no
CLM_other_shadows = no
CLM_high_clouds = no

MG2_water = no
MG2_all_clouds = no
MG2_snow = no
MG2_cloud_shadows = no
MG2_other_shadows = no
MG2_terrain_mask = no
MG2_sun_too_low = no
MG2_sun_tangent = no

[LandsatMasks]
fill = no
clear = no
water = no
cloud_shadow = no
snow = no
cloud = no
cloud_conf1 = no
cloud_conf2 = no
cirrus_conf1 = no
cirrus_conf2 = no
terrain_occlusion = no

