DetectWater Class
- recebe: input inicial
	- input folder
	- output folder
	- shape (optional)
	- options

- faz:
	- cria um DWLoader (input folder, tipo de produto (theia ou landsat)
	- cria um DWSaver (output folder, projection from loader) 
	- DetectWater.run()
	- se MNDWI, combina a lista bands_keys (sem MNDWI) com ['Green','Mir2']
	- loop pelas imagens do Loader
	- para cada imagem:
		- Loader.load(combined_bands)->Dictionary
		- Loader.load(masks)->Dictionary
		- Calc MNDWI; inclui no Dictionary
		- Cria DWImageClustering
		- ImageClustering.DetectWater()
		- Saver.create_output(output_folder, loader.image_name, options)
			- pega as propriedades 'bands' e 'clip_mir' e cria o diretrio
		- Saver.save(ImageCluster.WaterMask)
		- Saver.save(ImageCLuster.WaterCluster)
		- se options.graphs?
			- chart = create_graphs()
			- Saver.save(graphs)
		- del ImageCluster
		- Loader.clear()

DWProcessor
- recebe: Loader, Saver, options (o que calcular, onde salvar, etc.)
- faz:

	

- faz um loop pelas imagens do DWLoader



Classe DWImage
- recebe: dicionario de arrays (mesma resolucao)
- recebe: bandas para fazer o cluster (mais de uma combinacao???)
- recebe: mascara 
- recebe: OPTIONS
	- maximo de pixels para processar
- testa se tem todas as bandas (para MNDWI, NDWI, ...)
- method: Difference Index(bands)
- 




DWLoader


DWProcessor



Opção 1 (sem batch):

DetectWater
	- wrapper de todo o processo
	- faz o parse do arquivo de configuração e cria o dicionário de opções para o DWLoader e para o 

DWProcessor
	- cria um DWLoader (input folder, product, etc.)
	- DWLoader.load_band : carrega banda a banda, nao precisa carregar tudo de uma vez

	- chama o DWProcessor (DWLoader, output_folder, options, channels, points, etc.)

DWProcessor (recebe um DWLoader ou um dicionário de bandas (red, green, etc.))
	    (recebe um dicionário com as opções)
	- faz um loop DWLoader.Pop()
	- Pop() retorna bands e mask em arrays
	- Cria o DWProcessImage
	- DWProcessImage.run(bands, masks, options)
		- DWProcessImage que faz o processamento em si
		- DWProcessImage retorna a matriz resposta
	- DWProcessor pega a resposta e salva no output folder
	- DWLoader.saveraster(matriz resposta)
	- faz novamente DWLoader.Pop() até terminar a lista

DWLoader (poderíamos ter DWTheiaLoader, DWLandsatLoader, etc.)
	- proxy entre os produtos no disco e o formato necessário para processar
	- Coloca todas as bandas na mesma resolução
	- Pop() pega as bandas e carrega elas em numpy arrays
		- pega as mascaras e devolve uma máscara única
		- carrega geotransform e projection e deixa na memória
		- todo saveraster enquanto não tem outro Pop() será com essa projeção

Opção 2 (sem batch)

composicao classe loader
load recebe componentes
cada componente tem entradas e saidas padrao

